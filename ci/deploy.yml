- name: Deploy Spring Boot App Locally
  hosts: localhost
  become: yes

  tasks:
    - name: Ensure deployment directory exists
      file:
        path: /opt/student-app
        state: directory
        mode: '0755'

    - name: Determine the built JAR file
      set_fact:
        jar_file: "{{ lookup('fileglob', playbook_dir + '/../target/*.jar', wantlist=True)[0] }}"

    - name: Copy built jar to deployment location
      copy:
        src: "{{ jar_file }}"
        dest: /opt/student-app/student-passfail.jar
        mode: '0755'

    - name: Stop old Spring Boot process (via pidfile)
      shell: |
        if [ -f /opt/student-app/student-passfail.pid ]; then
          pid=$(cat /opt/student-app/student-passfail.pid)
          if kill -0 "$pid" 2>/dev/null; then
            echo "→ Killing old app (PID $pid)"
            kill "$pid" || true
          fi
        fi
      args:
        executable: /bin/bash

    - name: Start Spring Boot app and record PID
      shell: |
        nohup java -jar /opt/student-app/student-passfail.jar --server.port=8888 \
          > /opt/student-app/app.log 2>&1 &
        echo $! > /opt/student-app/student-passfail.pid
      args:
        executable: /bin/bash

    - name: Wait until application returns HTTP 200
      shell: |
        count=0
        until curl -s -o /dev/null -w "%{http_code}" http://localhost:8888 | grep -q "^200$"; do
          count=$((count+1))
          if [ $count -ge 30 ]; then
            echo "❌ App did not respond within $((30*2)) seconds"
            tail -n 30 /opt/student-app/app.log
            exit 1
          fi
          echo "   …waiting for app to be up ($count/30)…"
          sleep 2
        done
        echo "✅ Application is up!"
      args:
        executable: /bin/bash
      environment:
        BUILD_ID: "dontKillMe"
